// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"github.com/nhutHao02/social-network-chat-service/config"
	"github.com/nhutHao02/social-network-chat-service/database"
	"github.com/nhutHao02/social-network-chat-service/internal/api"
	"github.com/nhutHao02/social-network-chat-service/internal/api/http"
	"github.com/nhutHao02/social-network-chat-service/internal/api/http/v1"
	"github.com/nhutHao02/social-network-chat-service/internal/application/imp"
	"github.com/nhutHao02/social-network-chat-service/internal/infrastructure/chat"
	"github.com/nhutHao02/social-network-chat-service/pkg/redis"
	"github.com/nhutHao02/social-network-chat-service/pkg/websocket"
	"github.com/nhutHao02/social-network-user-service/pkg/grpc"
)

// Injectors from wire.go:

func InitializeServer(cfg *config.Config, db *database.MongoDbClient, rdb *redis.RedisClient, userClient grpc.UserServiceClient, commentWS *websocket.Socket) *api.Server {
	chatQueryRepository := chat.NewChatQueryRepository(db, cfg)
	chatCommandRepository := chat.NewChatCommandRepository(db, cfg)
	chatService := imp.NewChatService(chatQueryRepository, chatCommandRepository, userClient, commentWS)
	chatHandler := v1.NewChatHandler(chatService)
	httpServer := http.NewHTTPServer(cfg, chatHandler)
	server := api.NewSerVer(httpServer)
	return server
}

// wire.go:

var serverSet = wire.NewSet(api.NewSerVer)

var itemServerSet = wire.NewSet(http.NewHTTPServer)

var httpHandlerSet = wire.NewSet(v1.NewChatHandler)

var serviceSet = wire.NewSet(imp.NewChatService)

var repositorySet = wire.NewSet(chat.NewChatCommandRepository, chat.NewChatQueryRepository)
